sqrt(a)
help(&)
help("&")
ISTRUE(a)
IS.TRUE(A)
isTRUE(x)
x=TRUE
isTRUE(x)
x=0
isTRUE(x)
x=1
isTRUE(x)
clear
clear()
clean()
clean
>c(1,2,34)
c(1,2,3,4)
a=c(1,2,3)
b=c("tis", "that", "is")
c=c(a,b)
c
c=c(a,b,c)
c
a+b
a-b
a/b
c[3]
c-3]
c[-3]
c[3]
c
c[3]
c[-3]
am = matrix(
c(1,2,3,4,5,6,7,8)
nrow=2,
ncol=3,
am = matrix(
c(1,2,3,4,6,7,8,9),
nrow=2,
ncol=3
,
byrow=TRUE)
am
am = matrix(
c(1,2,3,4,6,7,8,9),
nrow=2,
nrow=3,
ncol=3,
byrow=TRUE)
am
bm = matrix(c(1,2,3,4,5,6,7,8),nrow=3,ncol=3,byrow=TRUE)
bm
bm = matrix(c(1,2,3,4,5,6,),nrow=3,ncol=3,byrow=TRUE)
bm
bm = matrix(c(1,2,3,4,5,6),nrow=3,ncol=3,byrow=TRUE)
bm
amatrix=matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow=TRUE)
amatrix
amtrix(3,3)
amatrix[3,3]
amatrix(3)
amatrix(3,)
amtrix(,3)
amtrix(3,)
amatrix(3,)
amatrix[3,]
amatrix[1]
amatrix[2]
amatrix[,3]
amatrix[,2]
amatrix[c(2,3)]
amatrix[c(2,)]
amatrix[c(2)]
amatrix[c(1,3)]
amatrix[,c(1,3)]
amatrix
t(matrix)
t(amatrix)
amatrix * t(amatrix)
amatrix / t(amatrix)
amatrix - t(amatrix)
amatrix + t(amatrix)
t(t(amatrix))
t(t(amatrix)) == amatrix
t(amatrix) == amatrix
amatrix
t(amatrix)
c = amatrix == t(matrix)
c = amatrix == t(amatrix)
c
d = amatrix[c]
d
c=c[c(TRUE, TRUE,TRUE)]
c
e=amatrix[amatrix==t(amatrix)]
e
f=amatrix[c(TRUE,TRUE,TRUE)]
f
f=amatrix[c(TRUE,TRUE,TRUE),]
f
f=amatrix[c(TRUE,FALSE,TRUE),]
f
f=amatrix[c(TRUE,FALSE,FALSE),]
f
f=amatrix[,c(TRUE,FALSE,FALSE)]
f
f=amatrix[,1]
f
amatrix[,1,2,3]
amatrix[1,2,3]]
amatrix[c(1,2,3)]]
amatrix[c(1,2,3)]
amatrix[2,3]
amatrix[,2,3]
a=matrix(c(1,2,3,4,5,6),nrow=3,ncol=2)
a
b=matrix(c(7,8,9),nrow=3,ncol=1)
cbind(a,b)
cbind(b,a)
cbind(b,t(a))
cbind(t(b),t(a))
t(a)
t(b)
cbind(t(a),t(b))
cbind(t(a),b)
cbind(t(a),b[c(1,2),])
cbind(t(a),b[c(3,4),])
cbind(t(a),b[,c(3,4)])
cbind(t(a),b[,c(3)])
cbind(t(a),b[,3])
b[,3]
b[3]
b[3,]
b[(3),]
b[c(3),]
c(a)
x=c(1,2,3,4,5)
y=c("aa","bb","cc","dd","ee")
b=c(TRUE, FALSE, TRUE, FALSE)
z=list(x,y,b)
z
z[1]
z[2]
z[3]
z(c(1,2))
z[c(1,2)]
z[c(2,4)]
zz =list(z,z)
zz
zz[1]
zz[1]mtcars
mtcars
mtcars[0]
mtcars[1]
mtcars[2]
mtcars[2,]
mtcars[0,]
mtcars[,0]
mtcars[,1]
mtcars[,1]
nrows(mtcars)
nrow(mtcars)
ncol(mtcars)
mtcars[1]
mtcars[2]
mtcars[2,]
mtcars[c("mpg","dis"]
mtcars[c("mpg","dis")]
mtcars[c("mpg","disp")]
help(read.xls)
help('??read.xls')
library(gdata)
read.xls('./*')
getwd()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
?rnorm
args(
"rnorm"
)
con <-url("http://www.jhsph.edu","r")
x<-readLines(con)
head(x)
body(x)
html(x)
x
detail(x)
head(x)
html(x)
title(x)
head(x)
type(x)
lappy
lapply
ucscDb <- dbConnect(MySQL(), user="genome", host"genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
dbConnect
install.packages("RMySQL")
library("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <-dbGetQuery(ucscDb, "show databases;")
result
result <-dbGetQuery(ucscDb, "select count(*) from test;")
result <-dbGetQuery(ucscDb, "use test;")
result
result <-dbGetQuery(ucscDb, "show tables;")
result
result <-dbGetQuery(ucscDb, "select count(*) from Tables_in_test;")
result <-dbGetQuery(ucscDb, "select count() from Tables_in_test;")
result <-dbGetQuery(ucscDb, "show tables;")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <-dbGetQuery(ucscDb, "select count(*) from test;")
result <-dbGetQuery(ucscDb, "use test;")
result <-dbGetQuery(ucscDb, "select count(*) from test;")
result <-dbGetQuery(ucscDb, "select count() from Tables_in_test;")
result <-dbGetQuery(ucscDb, "select count(*) from Tables_in_test;")
result <-dbGetQuery(ucscDb, "select count(*) from Table_in_test;")
result <-dbGetQuery(ucscDb, "use xenTro3;")
result <-dbGetQuery(ucscDb, "show tables;")
result
result <-dbGetQuery(ucscDb, "select count(*) from gold;")
result
gplot(displ, hwy, data = mpg, geom=c("point", "smooth"))
install package("rgplot")
install package("gplot")
installpackage("gplot")
install.packages("gplot")
install.packages("rgplot")
install.packages("rqplot")
install.packages("qplot")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"))
library(ggplot2)
a <-available.pacakges()
a <- available.pacakges()
a <- available.packages()
a
cls
clear
clc
install.packages("slidify")
installed.packages()
install.packages(c("mice", "rpart", "party"))
install.packages(c("CARET", "randomForest"))
library(ggplots)
install.packages(("ggplots"))
search()
install.packages("ggplot2")
library(ggplot2)
search()
ggplot
install.packages(devtools)
install.packages("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
q()
getwd()
pwd
getwd
getwd()
cdwd
wd
x<-vector("integer", 10)
x
typeof(x)
read.table()
?read.table()
which(ll <- c(TRUE, FALSE, TRUE, NA, FALSE, FALSE, TRUE))
ll
which(ll)
getwd()
setwd("C:\datascience\r")
setwd("C:/datascience\r")
setwd("C:/datascience/r")
getwd()
dir()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
dir()
source("pollutantmean.R")
polluationmean<-function(directory, pollutant, id=1:332) {
files <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(files[id[1]:id[length(id)]], read.csv))
if(pollutant == "sulfate"){
mean(totalData$sulfate[!is.na(totalData$sulfate)])
}else if(pollutant == "nitrate"){
mean(totalData$nitrate[!is.na(totalData$nitrate)])
}
}
pollutantmean("specdata", "sulfate", 1:10)
totalData <-do.call(rbind, lapply(files[id[1]:id[length(id)]], read.csv))
mean(totalData$nitrate[!is.na(totalData$nitrate)])
mean(totalData$nitrate[!is.na(totalData$nitrate)])
pollutantmean("specdata", "sulfate", 1:10)
directory<-"specdata"
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
id=1
totalData <-do.call(rbind, lapply(fs[id], read.csv))
totalData
df <- data.frame(id=NA, nobs=NA)
for(idx in id) {
item = c(idx, nrow(totalData[totalData$ID==idx&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
rbind(df,item)
}
df
idx in id
item = c(idx, nrow(totalData[totalData$ID==idx&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
item
source("pollutantmean.R")
complete("specdata", 1)
id=1
length(id) == 1
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
item
rbind(df,item)
df<-na.omit(df)
df
na.omit(df)
rbind(df,item)
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
if(length(id) == 1) {
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
rbind(df,item)
}
na.omit(df)
na.omit(df)  fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
if(length(id) == 1) {
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
rbind(df,item)
}
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
if(length(id) == 1) {
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
rbind(df,item)
}
df
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
if(length(id) == 1) {
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
else if(length(id) > 1) {
for(idx in id) {
item = c(idx, nrow(totalData[totalData$ID==idx&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
rbind(df,item)
}
}
complete("specdata", 1)
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
if(length(id) == 1) {
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
else if(length(id) > 1) {
for(idx in id) {
item = c(idx, nrow(totalData[totalData$ID==idx&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
}
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
if(length(id) == 1) {
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
else {
for(idx in id) {
item = c(idx, nrow(totalData[totalData$ID==idx&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
}
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
if(length(id) == 1) {
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
df
df<-na.omit(df)
df
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
if(length(id) == 1) {
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
else if(length(id) > 1) {
for(idx in id) {
item = c(idx, nrow(totalData[totalData$ID==idx&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
}
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
if(length(id) == 1) {
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
if(length(id) > 1) {
for(idx in id) {
item = c(idx, nrow(totalData[totalData$ID==idx&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
}
df<-na.omit(df)
df
complete<-function(directory, id=1:332) {
fs <- list.files(directory, pattern = "\\.csv", full.names=TRUE)
totalData <-do.call(rbind, lapply(fs[id], read.csv))
df <- data.frame(id=NA, nobs=NA)
if(length(id) == 1) {
item = c(id, nrow(totalData[totalData$ID==id&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
else if(length(id) > 1) {
for(idx in id) {
item = c(idx, nrow(totalData[totalData$ID==idx&!is.na(totalData$sulfate) & !is.na(totalData$nitrate),]))
df<-rbind(df,item)
}
}
df<-na.omit(df)
df
}
complete("specdata", 1)
pollutantmean("specdata")
fs
totalData
?plot
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<-0.5 + 2*x + e
summary(y)
plot(x,y, type="l")
plot(sin, -pi, 2*pi)
plot(x,y)
>plot
?plot
plot(x,y, type="s")
plot(x,y, type="a")
plot(x,y, type="h")
plot(x,y, type="s")
plot(x,y, type="c")
plot(x,y, type="d")
plot(x,y, type="e")
plot(x,y, type="f")
plot(x,y, type="g)
plot(x,y, type="g")
plot(x,y, type="h")
x
y
class(x)
x''
x''
transpose(x)
set.seed(4)
sample(1:100, 20)
sample(1:10)
sample(1:10)
sample(letters)
sample(letters, 29)
sample(letters, 25)
system.time()
system.time(x<-0)
system.time(function(x){for(i in 1:100000){x=x+1}})
system.time(function(x){for(i in 1:100000){x=x+1}  function(1)})
system.time(fx<-function(x){for(i in 1:100000){x=x+1} fx(1)})
readLines("http://www.yahoo.com")
system.time(readLines("http://www.yahoo.com"))
Rprof()
str(Rprof)
summaryRprof
Rprof(readline("http://www.yahoo.com"))
library(dataasets)
library(datasets)
Rprof()
fit<-lm(y~x1+x2)
Rprof(null)
